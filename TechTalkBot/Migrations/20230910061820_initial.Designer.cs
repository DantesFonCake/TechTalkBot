// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TechTalkBot.Database;

#nullable disable

namespace TechTalkBot.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230910061820_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TechTalkBot.Database.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("ActivePollId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActivePollId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("TechTalkBot.Database.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WinnerName")
                        .HasColumnType("text");

                    b.Property<string>("WinnerUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("WinnerName", "WinnerUrl");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("TechTalkBot.Database.Video", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<int?>("PollId")
                        .HasColumnType("integer");

                    b.Property<bool>("WasInPoll")
                        .HasColumnType("boolean");

                    b.Property<bool>("Watched")
                        .HasColumnType("boolean");

                    b.HasKey("Name", "Url");

                    b.HasIndex("PollId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("TechTalkBot.Database.Chat", b =>
                {
                    b.HasOne("TechTalkBot.Database.Poll", "ActivePoll")
                        .WithMany()
                        .HasForeignKey("ActivePollId");

                    b.Navigation("ActivePoll");
                });

            modelBuilder.Entity("TechTalkBot.Database.Poll", b =>
                {
                    b.HasOne("TechTalkBot.Database.Video", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerName", "WinnerUrl");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("TechTalkBot.Database.Video", b =>
                {
                    b.HasOne("TechTalkBot.Database.Poll", null)
                        .WithMany("Options")
                        .HasForeignKey("PollId");
                });

            modelBuilder.Entity("TechTalkBot.Database.Poll", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
